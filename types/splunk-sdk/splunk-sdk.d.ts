/** Declaration file generated by dts-gen */

export class Context {
    constructor(...args: any[]);

    del(path: any, params: any, callback: any): any;

    fullpath(path: any, namespace: any): any;

    get(path: any, params: any, callback: any): any;

    init(http: any, params: any): void;

    login(callback: any): any;

    logout(callback: any): void;

    post(path: any, params: any, callback: any): any;

    request(path: any, method: any, query: any, post: any, body: any, headers: any, callback: any): any;

    urlify(path: any): any;

    versionCompare(otherVersion: any): any;

    static Sharing: {
        APP: string;
        GLOBAL: string;
        SYSTEM: string;
        USER: string;
    };

    static extend(prop: any, ...args: any[]): any;

}

export class Http {
    constructor(...args: any[]);

    del(url: any, headers: any, params: any, timeout: any, callback: any): any;

    get(url: any, headers: any, params: any, timeout: any, callback: any): any;

    init(): void;

    makeRequest(url: any, message: any, callback: any): void;

    parseJson(json: any): void;

    post(url: any, headers: any, params: any, timeout: any, callback: any): any;

    request(url: any, message: any, callback: any): any;

    static encode(params: any): any;

    static extend(prop: any, ...args: any[]): any;

}

export class NodeHttp {
    constructor(...args: any[]);

    init(...args: any[]): any;

    makeRequest(url: any, message: any, callback: any): any;

    parseJson(json: any): any;

    static extend(prop: any, ...args: any[]): any;

}

export class Service {
    constructor(...args: any[]);

    apps(): any;

    configurations(namespace: any): any;

    currentUser(callback: any, ...args: any[]): any;

    dataModels(namespace: any): any;

    firedAlertGroups(namespace: any): any;

    getJob(sid: any, namespace: any, callback: any): any;

    indexes(namespace: any): any;

    init(...args: any[]): any;

    jobs(namespace: any): any;

    log(event: any, params: any, callback: any): any;

    oneshotSearch(query: any, params: any, namespace: any, callback: any): any;

    parse(query: any, params: any, callback: any): any;

    savedSearches(namespace: any): any;

    search(query: any, params: any, namespace: any, callback: any): any;

    serverInfo(callback: any): any;

    specialize(owner: any, app: any): any;

    storagePasswords(namespace: any): any;

    typeahead(prefix: any, count: any, callback: any): any;

    users(): any;

    views(namespace: any): any;

    static DataModelConstraint(...args: any[]): void;

    static extend(prop: any, ...args: any[]): any;

}

export const Paths: {
    apps: string;
    capabilities: string;
    configurations: string;
    currentUser: string;
    dataModels: string;
    deploymentClient: string;
    deploymentServerClasses: string;
    deploymentServers: string;
    deploymentTenants: string;
    eventTypes: string;
    firedAlerts: string;
    indexes: string;
    info: string;
    inputs: any;
    jobs: string;
    licenseGroups: string;
    licenseMessages: string;
    licensePools: string;
    licenseSlaves: string;
    licenseStacks: string;
    licenses: string;
    loggers: string;
    login: string;
    messages: string;
    parser: string;
    passwords: string;
    pivot: string;
    properties: string;
    roles: string;
    savedSearches: string;
    settings: string;
    storagePasswords: string;
    submitEvent: string;
    typeahead: string;
    users: string;
    views: string;
};

export function Class(): void;

export namespace Async {
    function augment(callback: any, ...args: any[]): any;

    function chain(tasks: any, callback: any, ...args: any[]): void;

    function parallel(tasks: any, callback: any, ...args: any[]): any;

    function parallelEach(vals: any, fn: any, callback: any): void;

    function parallelMap(vals: any, fn: any, callback: any, ...args: any[]): any;

    function series(tasks: any, callback: any, ...args: any[]): void;

    function seriesEach(vals: any, fn: any, callback: any): void;

    function seriesMap(vals: any, fn: any, callback: any, ...args: any[]): any;

    function sleep(timeout: any, callback: any): void;

    function whilst(condition: any, body: any, callback: any): any;

}

export namespace Class {
    function extend(prop: any, ...args: any[]): any;

}

export namespace Logger {
    const levels: {
        ALL: number;
        ERROR: number;
        INFO: number;
        NONE: number;
        WARN: number;
    };

    function error(...args: any[]): void;

    function info(...args: any[]): void;

    function log(...args: any[]): void;

    function printMessages(allMessages: any): void;

    function setLevel(level: any, ...args: any[]): void;

    function warn(...args: any[]): void;

}


export namespace Service {
    class Application {
        constructor(...args: any[]);

        init(...args: any[]): any;

        path(): any;

        setupInfo(callback: any): any;

        updateInfo(callback: any): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Applications {
        constructor(...args: any[]);

        init(...args: any[]): any;

        instantiateEntity(props: any): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Collection {
        constructor(...args: any[]);

        create(params: any, callback: any, ...args: any[]): any;

        fetch(options: any, callback: any): any;

        init(...args: any[]): any;

        instantiateEntity(props: any): void;

        item(id: any, namespace: any): any;

        links(): any;

        list(callback: any): any;

        paging(): any;

        updated(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class ConfigurationFile {
        constructor(...args: any[]);

        create(...args: any[]): any;

        getDefaultStanza(): any;

        init(...args: any[]): any;

        instantiateEntity(props: any): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class ConfigurationStanza {
        constructor(...args: any[]);

        init(...args: any[]): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Configurations {
        constructor(...args: any[]);

        create(filename: any, callback: any, ...args: any[]): any;

        init(...args: any[]): any;

        instantiateEntity(props: any): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class DataModel {
        constructor(...args: any[]);

        hasObject(name: any): any;

        init(...args: any[]): any;

        isAccelerated(): any;

        objectByName(name: any): any;

        path(): any;

        update(props: any, callback: any): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class DataModelCalculation {
        constructor(...args: any[]);

        init(props: any): void;

        isEditable(): any;

        isEval(): any;

        isGeoIP(): any;

        isLookup(): any;

        isRex(): any;

        outputFieldNames(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class DataModelField {
        constructor(...args: any[]);

        init(props: any): void;

        isBoolean(): any;

        isChildcount(): any;

        isIPv4(): any;

        isNumber(): any;

        isObjectcount(): any;

        isString(): any;

        isTimestamp(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class DataModelObject {
        constructor(...args: any[]);

        allFieldNames(): any;

        allFields(): any;

        calculatedFieldNames(): any;

        calculatedFields(): any;

        calculationIDs(): any;

        createLocalAccelerationJob(earliestTime: any, callback: any): void;

        createPivotSpecification(): any;

        fieldByName(name: any): any;

        fieldNames(): any;

        hasField(fieldName: any): any;

        init(props: any, parentDataModel: any): void;

        isBaseSearch(): any;

        isBaseTransaction(): any;

        parent(): any;

        startSearch(params: any, querySuffix: any, callback: any): void;

        static extend(prop: any, ...args: any[]): any;

    }

    class DataModels {
        constructor(...args: any[]);

        create(name: any, params: any, callback: any): any;

        init(...args: any[]): any;

        instantiateEntity(props: any): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Endpoint {
        constructor(...args: any[]);

        del(relpath: any, params: any, callback: any): any;

        get(relpath: any, params: any, callback: any): any;

        init(service: any, qualifiedPath: any): void;

        post(relpath: any, params: any, callback: any): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Entity {
        constructor(...args: any[]);

        acl(): any;

        author(): any;

        disable(callback: any): void;

        enable(callback: any): void;

        fetch(options: any, callback: any): any;

        fields(): any;

        init(...args: any[]): any;

        links(): any;

        published(): any;

        reload(callback: any): void;

        remove(callback: any): any;

        update(props: any, callback: any, ...args: any[]): any;

        updated(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class FiredAlert {
        constructor(...args: any[]);

        actions(): any;

        alertType(): any;

        expirationTime(): any;

        init(...args: any[]): any;

        isDigestMode(): any;

        path(): any;

        savedSearchName(): any;

        severity(): any;

        sid(): any;

        triggerTime(): any;

        triggerTimeRendered(): any;

        triggeredAlertCount(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class FiredAlertGroup {
        constructor(...args: any[]);

        count(): any;

        init(...args: any[]): any;

        list(options: any, callback: any): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class FiredAlertGroupCollection {
        constructor(...args: any[]);

        init(...args: any[]): any;

        instantiateEntity(props: any): any;

        path(): any;

        remove(): void;

        static extend(prop: any, ...args: any[]): any;

    }

    class Index {
        constructor(...args: any[]);

        init(...args: any[]): any;

        path(): any;

        remove(...args: any[]): any;

        submitEvent(event: any, params: any, callback: any): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Indexes {
        constructor(...args: any[]);

        create(...args: any[]): any;

        init(...args: any[]): any;

        instantiateEntity(props: any): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Job {
        constructor(...args: any[]);

        cancel(callback: any): any;

        disablePreview(callback: any): any;

        enablePreview(callback: any): any;

        events(params: any, callback: any): any;

        finalize(callback: any): any;

        init(...args: any[]): any;

        iterator(type: any, params: any): any;

        path(): any;

        pause(callback: any): any;

        preview(params: any, callback: any): any;

        results(params: any, callback: any): any;

        searchlog(callback: any): any;

        setPriority(value: any, callback: any): any;

        setTTL(value: any, callback: any): any;

        summary(params: any, callback: any): any;

        timeline(params: any, callback: any): any;

        touch(callback: any): any;

        track(options: any, callbacks: any): any;

        unpause(callback: any): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Jobs {
        constructor(...args: any[]);

        create(query: any, params: any, callback: any): any;

        init(...args: any[]): any;

        instantiateEntity(props: any): any;

        oneshotSearch(query: any, params: any, callback: any): any;

        path(): any;

        search(query: any, params: any, callback: any): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class PaginatedEndpointIterator {
        constructor(...args: any[]);

        init(endpoint: any, params: any): void;

        next(callback: any): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Pivot {
        constructor(...args: any[]);

        init(service: any, props: any): void;

        run(args: any, callback: any): void;

        static extend(prop: any, ...args: any[]): any;

    }

    class PivotSpecification {
        constructor(...args: any[]);

        addBooleanColumnSplit(fieldName: any, trueDisplayValue: any, falseDisplayValue: any): any;

        addBooleanRowSplit(field: any, label: any, trueDisplayValue: any, falseDisplayValue: any): any;

        addCellValue(fieldName: any, label: any, statsFunction: any): any;

        addColumnSplit(fieldName: any): any;

        addFilter(fieldName: any, comparisonType: any, comparisonOp: any, compareTo: any): any;

        addLimitFilter(fieldName: any, sortAttribute: any, sortDirection: any, limit: any, statsFunction: any): any;

        addRangeColumnSplit(fieldName: any, ranges: any): any;

        addRangeRowSplit(field: any, label: any, ranges: any): any;

        addRowSplit(fieldName: any, label: any): any;

        addTimestampColumnSplit(field: any, binning: any): any;

        addTimestampRowSplit(field: any, label: any, binning: any): any;

        init(dataModelObject: any): void;

        pivot(callback: any): any;

        run(args: any, callback: any): void;

        setAccelerationJob(sid: any): any;

        toJsonObject(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Resource {
        constructor(...args: any[]);

        fetch(callback: any): void;

        init(...args: any[]): any;

        path(): void;

        properties(): any;

        state(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class SavedSearch {
        constructor(...args: any[]);

        acknowledge(callback: any): any;

        alertCount(): any;

        dispatch(options: any, callback: any): any;

        firedAlertGroup(): any;

        history(callback: any): any;

        init(...args: any[]): any;

        path(): any;

        suppressInfo(callback: any): any;

        update(...args: any[]): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class SavedSearches {
        constructor(...args: any[]);

        init(...args: any[]): any;

        instantiateEntity(props: any): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class ServerInfo {
        constructor(...args: any[]);

        init(...args: any[]): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class StoragePassword {
        constructor(...args: any[]);

        init(...args: any[]): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class StoragePasswords {
        constructor(...args: any[]);

        init(...args: any[]): any;

        instantiateEntity(props: any): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class User {
        constructor(...args: any[]);

        init(...args: any[]): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Users {
        constructor(...args: any[]);

        create(params: any, callback: any, ...args: any[]): any;

        init(...args: any[]): any;

        instantiateEntity(props: any): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class View {
        constructor(...args: any[]);

        init(...args: any[]): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    class Views {
        constructor(...args: any[]);

        init(...args: any[]): any;

        instantiateEntity(props: any): any;

        path(): any;

        static extend(prop: any, ...args: any[]): any;

    }

    namespace DataModelConstraint {
        function extend(prop: any, ...args: any[]): any;

    }

}
